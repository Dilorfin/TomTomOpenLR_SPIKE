// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtobufTrafficFlow_v8.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom {

  /// <summary>Holder for reflection information generated from ProtobufTrafficFlow_v8.proto</summary>
  public static partial class ProtobufTrafficFlowV8Reflection {

    #region Descriptor
    /// <summary>File descriptor for ProtobufTrafficFlow_v8.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtobufTrafficFlowV8Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxQcm90b2J1ZlRyYWZmaWNGbG93X3Y4LnByb3RvEgt0cmFmZmljRmxvdyKi",
            "AgoQVHJhZmZpY0Zsb3dHcm91cBI1Cg9tZXRhSW5mb3JtYXRpb24YASABKAsy",
            "HC50cmFmZmljRmxvdy5NZXRhSW5mb3JtYXRpb24SLQoLdHJhZmZpY0Zsb3cY",
            "AiADKAsyGC50cmFmZmljRmxvdy5UcmFmZmljRmxvdxJJChl0cmFmZmljRmxv",
            "d1dpdGhQcmVkaWN0aW9uGAMgAygLMiYudHJhZmZpY0Zsb3cuVHJhZmZpY0Zs",
            "b3dXaXRoUHJlZGljdGlvbhJdCiN0cmFmZmljRmxvd1dpdGhQcmVkaWN0aW9u",
            "UGVyU2VjdGlvbhgEIAMoCzIwLnRyYWZmaWNGbG93LlRyYWZmaWNGbG93V2l0",
            "aFByZWRpY3Rpb25QZXJTZWN0aW9uIp0BCg9NZXRhSW5mb3JtYXRpb24SHAoU",
            "Y3JlYXRlVGltZVVUQ1NlY29uZHMYASABKA0SQQoVc3VwcGxpZXJBbmRDbGll",
            "bnRJbmZvGAIgASgLMiIudHJhZmZpY0Zsb3cuU3VwcGxpZXJBbmRDbGllbnRJ",
            "bmZvEhUKDWZvcm1hdFZlcnNpb24YAyABKAUSEgoKbWFwVmVyc2lvbhgEIAMo",
            "CSI9ChVTdXBwbGllckFuZENsaWVudEluZm8SEAoIY2xpZW50SUQYASABKAkS",
            "EgoKc3VwcGxpZXJJRBgCIAEoCSKmAQoLVHJhZmZpY0Zsb3cSJwoIbG9jYXRp",
            "b24YASABKAsyFS50cmFmZmljRmxvdy5Mb2NhdGlvbhIhCgVzcGVlZBgCIAMo",
            "CzISLnRyYWZmaWNGbG93LlNwZWVkEhoKC3JvYWRDbG9zdXJlGAMgASgIOgVm",
            "YWxzZRIvCgxzZWN0aW9uU3BlZWQYBCADKAsyGS50cmFmZmljRmxvdy5TZWN0",
            "aW9uU3BlZWQirgEKGVRyYWZmaWNGbG93V2l0aFByZWRpY3Rpb24SJwoIbG9j",
            "YXRpb24YASABKAsyFS50cmFmZmljRmxvdy5Mb2NhdGlvbhIuCgVzcGVlZBgC",
            "IAMoCzIfLnRyYWZmaWNGbG93LlNwZWVkV2l0aFRpbWVTdGFtcBIaCgtyb2Fk",
            "Q2xvc3VyZRgDIAEoCDoFZmFsc2USHAoUdGltZVRvVXN1YWxJbk1pbnV0ZXMY",
            "BCABKA0imwEKI1RyYWZmaWNGbG93V2l0aFByZWRpY3Rpb25QZXJTZWN0aW9u",
            "EicKCGxvY2F0aW9uGAEgASgLMhUudHJhZmZpY0Zsb3cuTG9jYXRpb24SLQoL",
            "c3BlZWRWZWN0b3IYAiADKAsyGC50cmFmZmljRmxvdy5TcGVlZFZlY3RvchIc",
            "ChR0aW1lVG9Vc3VhbEluTWludXRlcxgDIAEoDSI/CghMb2NhdGlvbhILCgN0",
            "bWMYASABKAkSDgoGb3BlbmxyGAIgASgMEhYKDmxlbmd0aEluTWV0ZXJzGAMg",
            "ASgNIu4BCgVTcGVlZBIYChBhdmVyYWdlU3BlZWRLbXBoGAEgASgFEhkKEXRy",
            "YXZlbFRpbWVTZWNvbmRzGAIgASgFEhIKCmNvbmZpZGVuY2UYAyABKAUSFQoN",
            "cmVsYXRpdmVTcGVlZBgEIAEoAhI3ChB0cmFmZmljQ29uZGl0aW9uGAUgASgO",
            "Mh0udHJhZmZpY0Zsb3cuVHJhZmZpY0NvbmRpdGlvbhIXCg9hdmVyYWdlU3Bl",
            "ZWRNcGgYBiABKAUSMwoOc3BlZWRDb25kaXRpb24YByABKAsyGy50cmFmZmlj",
            "Rmxvdy5TcGVlZENvbmRpdGlvbiJQChJTcGVlZFdpdGhUaW1lU3RhbXASFwoP",
            "bWludXRlc0luRnV0dXJlGAEgASgNEiEKBXNwZWVkGAIgAygLMhIudHJhZmZp",
            "Y0Zsb3cuU3BlZWQiVwoLU3BlZWRWZWN0b3ISFwoPbWludXRlc0luRnV0dXJl",
            "GAEgASgNEi8KDHNlY3Rpb25TcGVlZBgCIAMoCzIZLnRyYWZmaWNGbG93LlNl",
            "Y3Rpb25TcGVlZCJqCgxTZWN0aW9uU3BlZWQSGwoTc3RhcnRPZmZzZXRJbk1l",
            "dGVycxgBIAEoDRIhCgVzcGVlZBgCIAEoCzISLnRyYWZmaWNGbG93LlNwZWVk",
            "EhoKC3JvYWRDbG9zdXJlGAMgASgIOgVmYWxzZSI5Cg5TcGVlZENvbmRpdGlv",
            "bhInCghsYW5lVHlwZRgBIAEoDjIVLnRyYWZmaWNGbG93LkxhbmVUeXBlKqgB",
            "ChBUcmFmZmljQ29uZGl0aW9uEhcKE0xPTkdfUVVFVUVTX1RSQUZGSUMQARIQ",
            "CgxGUkVFX1RSQUZGSUMQAhIRCg1IRUFWWV9UUkFGRklDEAMSEAoMU0xPV19U",
            "UkFGRklDEAQSEwoPUVVFVUlOR19UUkFGRklDEAUSFgoSU1RBVElPTkFSWV9U",
            "UkFGRklDEAYSCgoGQ0xPU0VEEAcSCwoHVU5LTk9XThAIKh4KCExhbmVUeXBl",
            "EhIKDkhJR0hfT0NDVVBBTkNZEABCMaoCLlJvYWRuZXQuQXBleC5TZXJ2ZXIu",
            "Um9hZE5ldHdvcmsuVHJhZmZpYy5Ub21Ub20="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition), typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowGroup), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowGroup.Parser, new[]{ "MetaInformation", "TrafficFlow", "TrafficFlowWithPrediction", "TrafficFlowWithPredictionPerSection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation.Parser, new[]{ "CreateTimeUTCSeconds", "SupplierAndClientInfo", "FormatVersion", "MapVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo.Parser, new[]{ "ClientID", "SupplierID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow.Parser, new[]{ "Location", "Speed", "RoadClosure", "SectionSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction.Parser, new[]{ "Location", "Speed", "RoadClosure", "TimeToUsualInMinutes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection.Parser, new[]{ "Location", "SpeedVector", "TimeToUsualInMinutes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location.Parser, new[]{ "Tmc", "Openlr", "LengthInMeters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed.Parser, new[]{ "AverageSpeedKmph", "TravelTimeSeconds", "Confidence", "RelativeSpeed", "TrafficCondition", "AverageSpeedMph", "SpeedCondition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp.Parser, new[]{ "MinutesInFuture", "Speed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector.Parser, new[]{ "MinutesInFuture", "SectionSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed.Parser, new[]{ "StartOffsetInMeters", "Speed", "RoadClosure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition), global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition.Parser, new[]{ "LaneType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The enum TrafficCondition indicates the traffic status on the affected location.
  /// </summary>
  public enum TrafficCondition {
    [pbr::OriginalName("LONG_QUEUES_TRAFFIC")] LongQueuesTraffic = 1,
    [pbr::OriginalName("FREE_TRAFFIC")] FreeTraffic = 2,
    [pbr::OriginalName("HEAVY_TRAFFIC")] HeavyTraffic = 3,
    [pbr::OriginalName("SLOW_TRAFFIC")] SlowTraffic = 4,
    [pbr::OriginalName("QUEUING_TRAFFIC")] QueuingTraffic = 5,
    [pbr::OriginalName("STATIONARY_TRAFFIC")] StationaryTraffic = 6,
    [pbr::OriginalName("CLOSED")] Closed = 7,
    [pbr::OriginalName("UNKNOWN")] Unknown = 8,
  }

  /// <summary>
  /// Identifies specific lanes on a road segment by type.
  /// </summary>
  public enum LaneType {
    /// <summary>
    /// Lane may only be used by high occupancy vehicles.
    /// </summary>
    [pbr::OriginalName("HIGH_OCCUPANCY")] HighOccupancy = 0,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The traffic flow group is the top level message. It provides meta data
  /// covering general information about the flow data and the flow data itself.
  /// </summary>
  public sealed partial class TrafficFlowGroup : pb::IMessage<TrafficFlowGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrafficFlowGroup> _parser = new pb::MessageParser<TrafficFlowGroup>(() => new TrafficFlowGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficFlowGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowGroup(TrafficFlowGroup other) : this() {
      metaInformation_ = other.metaInformation_ != null ? other.metaInformation_.Clone() : null;
      trafficFlow_ = other.trafficFlow_.Clone();
      trafficFlowWithPrediction_ = other.trafficFlowWithPrediction_.Clone();
      trafficFlowWithPredictionPerSection_ = other.trafficFlowWithPredictionPerSection_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowGroup Clone() {
      return new TrafficFlowGroup(this);
    }

    /// <summary>Field number for the "metaInformation" field.</summary>
    public const int MetaInformationFieldNumber = 1;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation metaInformation_;
    /// <summary>
    /// The shared meta information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation MetaInformation {
      get { return metaInformation_; }
      set {
        metaInformation_ = value;
      }
    }

    /// <summary>Field number for the "trafficFlow" field.</summary>
    public const int TrafficFlowFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow> _repeated_trafficFlow_codec
        = pb::FieldCodec.ForMessage(18, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow> trafficFlow_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow>();
    /// <summary>
    /// The list of traffic flow elements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlow> TrafficFlow {
      get { return trafficFlow_; }
    }

    /// <summary>Field number for the "trafficFlowWithPrediction" field.</summary>
    public const int TrafficFlowWithPredictionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction> _repeated_trafficFlowWithPrediction_codec
        = pb::FieldCodec.ForMessage(26, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction> trafficFlowWithPrediction_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction>();
    /// <summary>
    /// The list of traffic flow elements which can also provide predictive flow data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPrediction> TrafficFlowWithPrediction {
      get { return trafficFlowWithPrediction_; }
    }

    /// <summary>Field number for the "trafficFlowWithPredictionPerSection" field.</summary>
    public const int TrafficFlowWithPredictionPerSectionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection> _repeated_trafficFlowWithPredictionPerSection_codec
        = pb::FieldCodec.ForMessage(34, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection> trafficFlowWithPredictionPerSection_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection>();
    /// <summary>
    /// The list of traffic flow elements with a higher spatial resolution for speeds
    /// and predictive flow data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficFlowWithPredictionPerSection> TrafficFlowWithPredictionPerSection {
      get { return trafficFlowWithPredictionPerSection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficFlowGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficFlowGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MetaInformation, other.MetaInformation)) return false;
      if(!trafficFlow_.Equals(other.trafficFlow_)) return false;
      if(!trafficFlowWithPrediction_.Equals(other.trafficFlowWithPrediction_)) return false;
      if(!trafficFlowWithPredictionPerSection_.Equals(other.trafficFlowWithPredictionPerSection_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metaInformation_ != null) hash ^= MetaInformation.GetHashCode();
      hash ^= trafficFlow_.GetHashCode();
      hash ^= trafficFlowWithPrediction_.GetHashCode();
      hash ^= trafficFlowWithPredictionPerSection_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metaInformation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaInformation);
      }
      trafficFlow_.WriteTo(output, _repeated_trafficFlow_codec);
      trafficFlowWithPrediction_.WriteTo(output, _repeated_trafficFlowWithPrediction_codec);
      trafficFlowWithPredictionPerSection_.WriteTo(output, _repeated_trafficFlowWithPredictionPerSection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metaInformation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaInformation);
      }
      trafficFlow_.WriteTo(ref output, _repeated_trafficFlow_codec);
      trafficFlowWithPrediction_.WriteTo(ref output, _repeated_trafficFlowWithPrediction_codec);
      trafficFlowWithPredictionPerSection_.WriteTo(ref output, _repeated_trafficFlowWithPredictionPerSection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metaInformation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaInformation);
      }
      size += trafficFlow_.CalculateSize(_repeated_trafficFlow_codec);
      size += trafficFlowWithPrediction_.CalculateSize(_repeated_trafficFlowWithPrediction_codec);
      size += trafficFlowWithPredictionPerSection_.CalculateSize(_repeated_trafficFlowWithPredictionPerSection_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficFlowGroup other) {
      if (other == null) {
        return;
      }
      if (other.metaInformation_ != null) {
        if (metaInformation_ == null) {
          MetaInformation = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation();
        }
        MetaInformation.MergeFrom(other.MetaInformation);
      }
      trafficFlow_.Add(other.trafficFlow_);
      trafficFlowWithPrediction_.Add(other.trafficFlowWithPrediction_);
      trafficFlowWithPredictionPerSection_.Add(other.trafficFlowWithPredictionPerSection_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metaInformation_ == null) {
              MetaInformation = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation();
            }
            input.ReadMessage(MetaInformation);
            break;
          }
          case 18: {
            trafficFlow_.AddEntriesFrom(input, _repeated_trafficFlow_codec);
            break;
          }
          case 26: {
            trafficFlowWithPrediction_.AddEntriesFrom(input, _repeated_trafficFlowWithPrediction_codec);
            break;
          }
          case 34: {
            trafficFlowWithPredictionPerSection_.AddEntriesFrom(input, _repeated_trafficFlowWithPredictionPerSection_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metaInformation_ == null) {
              MetaInformation = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.MetaInformation();
            }
            input.ReadMessage(MetaInformation);
            break;
          }
          case 18: {
            trafficFlow_.AddEntriesFrom(ref input, _repeated_trafficFlow_codec);
            break;
          }
          case 26: {
            trafficFlowWithPrediction_.AddEntriesFrom(ref input, _repeated_trafficFlowWithPrediction_codec);
            break;
          }
          case 34: {
            trafficFlowWithPredictionPerSection_.AddEntriesFrom(ref input, _repeated_trafficFlowWithPredictionPerSection_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The meta information message provides data shared by all
  /// traffic flow messages.
  /// </summary>
  public sealed partial class MetaInformation : pb::IMessage<MetaInformation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MetaInformation> _parser = new pb::MessageParser<MetaInformation>(() => new MetaInformation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetaInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaInformation(MetaInformation other) : this() {
      _hasBits0 = other._hasBits0;
      createTimeUTCSeconds_ = other.createTimeUTCSeconds_;
      supplierAndClientInfo_ = other.supplierAndClientInfo_ != null ? other.supplierAndClientInfo_.Clone() : null;
      formatVersion_ = other.formatVersion_;
      mapVersion_ = other.mapVersion_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaInformation Clone() {
      return new MetaInformation(this);
    }

    /// <summary>Field number for the "createTimeUTCSeconds" field.</summary>
    public const int CreateTimeUTCSecondsFieldNumber = 1;
    private readonly static uint CreateTimeUTCSecondsDefaultValue = 0;

    private uint createTimeUTCSeconds_;
    /// <summary>
    /// Creation time (UTC) of the traffic flow group in seconds since
    /// 00:00:00 UTC on 1 January 1970.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTimeUTCSeconds {
      get { if ((_hasBits0 & 1) != 0) { return createTimeUTCSeconds_; } else { return CreateTimeUTCSecondsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        createTimeUTCSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "createTimeUTCSeconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreateTimeUTCSeconds {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "createTimeUTCSeconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreateTimeUTCSeconds() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "supplierAndClientInfo" field.</summary>
    public const int SupplierAndClientInfoFieldNumber = 2;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo supplierAndClientInfo_;
    /// <summary>
    /// The supplier and client information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo SupplierAndClientInfo {
      get { return supplierAndClientInfo_; }
      set {
        supplierAndClientInfo_ = value;
      }
    }

    /// <summary>Field number for the "formatVersion" field.</summary>
    public const int FormatVersionFieldNumber = 3;
    private readonly static int FormatVersionDefaultValue = 0;

    private int formatVersion_;
    /// <summary>
    /// The format version. Can be used for debugging in order to compare
    /// the version of the protocol buffer on client and supplier side.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormatVersion {
      get { if ((_hasBits0 & 2) != 0) { return formatVersion_; } else { return FormatVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        formatVersion_ = value;
      }
    }
    /// <summary>Gets whether the "formatVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFormatVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "formatVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFormatVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mapVersion" field.</summary>
    public const int MapVersionFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_mapVersion_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> mapVersion_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// map name consisting of map region and version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MapVersion {
      get { return mapVersion_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetaInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetaInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateTimeUTCSeconds != other.CreateTimeUTCSeconds) return false;
      if (!object.Equals(SupplierAndClientInfo, other.SupplierAndClientInfo)) return false;
      if (FormatVersion != other.FormatVersion) return false;
      if(!mapVersion_.Equals(other.mapVersion_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCreateTimeUTCSeconds) hash ^= CreateTimeUTCSeconds.GetHashCode();
      if (supplierAndClientInfo_ != null) hash ^= SupplierAndClientInfo.GetHashCode();
      if (HasFormatVersion) hash ^= FormatVersion.GetHashCode();
      hash ^= mapVersion_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCreateTimeUTCSeconds) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateTimeUTCSeconds);
      }
      if (supplierAndClientInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SupplierAndClientInfo);
      }
      if (HasFormatVersion) {
        output.WriteRawTag(24);
        output.WriteInt32(FormatVersion);
      }
      mapVersion_.WriteTo(output, _repeated_mapVersion_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCreateTimeUTCSeconds) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateTimeUTCSeconds);
      }
      if (supplierAndClientInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SupplierAndClientInfo);
      }
      if (HasFormatVersion) {
        output.WriteRawTag(24);
        output.WriteInt32(FormatVersion);
      }
      mapVersion_.WriteTo(ref output, _repeated_mapVersion_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCreateTimeUTCSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTimeUTCSeconds);
      }
      if (supplierAndClientInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SupplierAndClientInfo);
      }
      if (HasFormatVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormatVersion);
      }
      size += mapVersion_.CalculateSize(_repeated_mapVersion_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetaInformation other) {
      if (other == null) {
        return;
      }
      if (other.HasCreateTimeUTCSeconds) {
        CreateTimeUTCSeconds = other.CreateTimeUTCSeconds;
      }
      if (other.supplierAndClientInfo_ != null) {
        if (supplierAndClientInfo_ == null) {
          SupplierAndClientInfo = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo();
        }
        SupplierAndClientInfo.MergeFrom(other.SupplierAndClientInfo);
      }
      if (other.HasFormatVersion) {
        FormatVersion = other.FormatVersion;
      }
      mapVersion_.Add(other.mapVersion_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateTimeUTCSeconds = input.ReadUInt32();
            break;
          }
          case 18: {
            if (supplierAndClientInfo_ == null) {
              SupplierAndClientInfo = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo();
            }
            input.ReadMessage(SupplierAndClientInfo);
            break;
          }
          case 24: {
            FormatVersion = input.ReadInt32();
            break;
          }
          case 34: {
            mapVersion_.AddEntriesFrom(input, _repeated_mapVersion_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CreateTimeUTCSeconds = input.ReadUInt32();
            break;
          }
          case 18: {
            if (supplierAndClientInfo_ == null) {
              SupplierAndClientInfo = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SupplierAndClientInfo();
            }
            input.ReadMessage(SupplierAndClientInfo);
            break;
          }
          case 24: {
            FormatVersion = input.ReadInt32();
            break;
          }
          case 34: {
            mapVersion_.AddEntriesFrom(ref input, _repeated_mapVersion_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The supplier and client information message is used to identify the client
  /// and the supplier.
  /// </summary>
  public sealed partial class SupplierAndClientInfo : pb::IMessage<SupplierAndClientInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SupplierAndClientInfo> _parser = new pb::MessageParser<SupplierAndClientInfo>(() => new SupplierAndClientInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupplierAndClientInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierAndClientInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierAndClientInfo(SupplierAndClientInfo other) : this() {
      clientID_ = other.clientID_;
      supplierID_ = other.supplierID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupplierAndClientInfo Clone() {
      return new SupplierAndClientInfo(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private readonly static string ClientIDDefaultValue = "";

    private string clientID_;
    /// <summary>
    /// Identifies the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_ ?? ClientIDDefaultValue; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clientID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientID {
      get { return clientID_ != null; }
    }
    /// <summary>Clears the value of the "clientID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientID() {
      clientID_ = null;
    }

    /// <summary>Field number for the "supplierID" field.</summary>
    public const int SupplierIDFieldNumber = 2;
    private readonly static string SupplierIDDefaultValue = "";

    private string supplierID_;
    /// <summary>
    /// Identifies the supplier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SupplierID {
      get { return supplierID_ ?? SupplierIDDefaultValue; }
      set {
        supplierID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "supplierID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSupplierID {
      get { return supplierID_ != null; }
    }
    /// <summary>Clears the value of the "supplierID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSupplierID() {
      supplierID_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupplierAndClientInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupplierAndClientInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      if (SupplierID != other.SupplierID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientID) hash ^= ClientID.GetHashCode();
      if (HasSupplierID) hash ^= SupplierID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasClientID) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (HasSupplierID) {
        output.WriteRawTag(18);
        output.WriteString(SupplierID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasClientID) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (HasSupplierID) {
        output.WriteRawTag(18);
        output.WriteString(SupplierID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClientID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (HasSupplierID) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SupplierID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupplierAndClientInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasClientID) {
        ClientID = other.ClientID;
      }
      if (other.HasSupplierID) {
        SupplierID = other.SupplierID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
          case 18: {
            SupplierID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
          case 18: {
            SupplierID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The traffic flow message assigns speed information to a location.
  /// </summary>
  public sealed partial class TrafficFlow : pb::IMessage<TrafficFlow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrafficFlow> _parser = new pb::MessageParser<TrafficFlow>(() => new TrafficFlow());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlow(TrafficFlow other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      speed_ = other.speed_.Clone();
      roadClosure_ = other.roadClosure_;
      sectionSpeed_ = other.sectionSpeed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlow Clone() {
      return new TrafficFlow(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location location_;
    /// <summary>
    /// The location information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed> _repeated_speed_codec
        = pb::FieldCodec.ForMessage(18, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed> speed_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed>();
    /// <summary>
    /// The speed information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed> Speed {
      get { return speed_; }
    }

    /// <summary>Field number for the "roadClosure" field.</summary>
    public const int RoadClosureFieldNumber = 3;
    private readonly static bool RoadClosureDefaultValue = false;

    private bool roadClosure_;
    /// <summary>
    /// Flag indicating road closures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RoadClosure {
      get { if ((_hasBits0 & 1) != 0) { return roadClosure_; } else { return RoadClosureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roadClosure_ = value;
      }
    }
    /// <summary>Gets whether the "roadClosure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoadClosure {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "roadClosure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoadClosure() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sectionSpeed" field.</summary>
    public const int SectionSpeedFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed> _repeated_sectionSpeed_codec
        = pb::FieldCodec.ForMessage(34, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed> sectionSpeed_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed>();
    /// <summary>
    /// List of speed parameters per section. The sections are ordered by start offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed> SectionSpeed {
      get { return sectionSpeed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if(!speed_.Equals(other.speed_)) return false;
      if (RoadClosure != other.RoadClosure) return false;
      if(!sectionSpeed_.Equals(other.sectionSpeed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= speed_.GetHashCode();
      if (HasRoadClosure) hash ^= RoadClosure.GetHashCode();
      hash ^= sectionSpeed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      speed_.WriteTo(output, _repeated_speed_codec);
      if (HasRoadClosure) {
        output.WriteRawTag(24);
        output.WriteBool(RoadClosure);
      }
      sectionSpeed_.WriteTo(output, _repeated_sectionSpeed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      speed_.WriteTo(ref output, _repeated_speed_codec);
      if (HasRoadClosure) {
        output.WriteRawTag(24);
        output.WriteBool(RoadClosure);
      }
      sectionSpeed_.WriteTo(ref output, _repeated_sectionSpeed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      size += speed_.CalculateSize(_repeated_speed_codec);
      if (HasRoadClosure) {
        size += 1 + 1;
      }
      size += sectionSpeed_.CalculateSize(_repeated_sectionSpeed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficFlow other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
        }
        Location.MergeFrom(other.Location);
      }
      speed_.Add(other.speed_);
      if (other.HasRoadClosure) {
        RoadClosure = other.RoadClosure;
      }
      sectionSpeed_.Add(other.sectionSpeed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            speed_.AddEntriesFrom(input, _repeated_speed_codec);
            break;
          }
          case 24: {
            RoadClosure = input.ReadBool();
            break;
          }
          case 34: {
            sectionSpeed_.AddEntriesFrom(input, _repeated_sectionSpeed_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            speed_.AddEntriesFrom(ref input, _repeated_speed_codec);
            break;
          }
          case 24: {
            RoadClosure = input.ReadBool();
            break;
          }
          case 34: {
            sectionSpeed_.AddEntriesFrom(ref input, _repeated_sectionSpeed_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A traffic flow message type dedicated for flow prediction.
  /// </summary>
  public sealed partial class TrafficFlowWithPrediction : pb::IMessage<TrafficFlowWithPrediction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrafficFlowWithPrediction> _parser = new pb::MessageParser<TrafficFlowWithPrediction>(() => new TrafficFlowWithPrediction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficFlowWithPrediction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowWithPrediction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowWithPrediction(TrafficFlowWithPrediction other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      speed_ = other.speed_.Clone();
      roadClosure_ = other.roadClosure_;
      timeToUsualInMinutes_ = other.timeToUsualInMinutes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowWithPrediction Clone() {
      return new TrafficFlowWithPrediction(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location location_;
    /// <summary>
    /// The location information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp> _repeated_speed_codec
        = pb::FieldCodec.ForMessage(18, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp> speed_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp>();
    /// <summary>
    /// The speed information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedWithTimeStamp> Speed {
      get { return speed_; }
    }

    /// <summary>Field number for the "roadClosure" field.</summary>
    public const int RoadClosureFieldNumber = 3;
    private readonly static bool RoadClosureDefaultValue = false;

    private bool roadClosure_;
    /// <summary>
    /// Flag indicating road closures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RoadClosure {
      get { if ((_hasBits0 & 1) != 0) { return roadClosure_; } else { return RoadClosureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roadClosure_ = value;
      }
    }
    /// <summary>Gets whether the "roadClosure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoadClosure {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "roadClosure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoadClosure() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timeToUsualInMinutes" field.</summary>
    public const int TimeToUsualInMinutesFieldNumber = 4;
    private readonly static uint TimeToUsualInMinutesDefaultValue = 0;

    private uint timeToUsualInMinutes_;
    /// <summary>
    /// Expected time in minutes it takes until the current speed equals the usual speed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeToUsualInMinutes {
      get { if ((_hasBits0 & 2) != 0) { return timeToUsualInMinutes_; } else { return TimeToUsualInMinutesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timeToUsualInMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "timeToUsualInMinutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeToUsualInMinutes {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timeToUsualInMinutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeToUsualInMinutes() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficFlowWithPrediction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficFlowWithPrediction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if(!speed_.Equals(other.speed_)) return false;
      if (RoadClosure != other.RoadClosure) return false;
      if (TimeToUsualInMinutes != other.TimeToUsualInMinutes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= speed_.GetHashCode();
      if (HasRoadClosure) hash ^= RoadClosure.GetHashCode();
      if (HasTimeToUsualInMinutes) hash ^= TimeToUsualInMinutes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      speed_.WriteTo(output, _repeated_speed_codec);
      if (HasRoadClosure) {
        output.WriteRawTag(24);
        output.WriteBool(RoadClosure);
      }
      if (HasTimeToUsualInMinutes) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeToUsualInMinutes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      speed_.WriteTo(ref output, _repeated_speed_codec);
      if (HasRoadClosure) {
        output.WriteRawTag(24);
        output.WriteBool(RoadClosure);
      }
      if (HasTimeToUsualInMinutes) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeToUsualInMinutes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      size += speed_.CalculateSize(_repeated_speed_codec);
      if (HasRoadClosure) {
        size += 1 + 1;
      }
      if (HasTimeToUsualInMinutes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeToUsualInMinutes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficFlowWithPrediction other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
        }
        Location.MergeFrom(other.Location);
      }
      speed_.Add(other.speed_);
      if (other.HasRoadClosure) {
        RoadClosure = other.RoadClosure;
      }
      if (other.HasTimeToUsualInMinutes) {
        TimeToUsualInMinutes = other.TimeToUsualInMinutes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            speed_.AddEntriesFrom(input, _repeated_speed_codec);
            break;
          }
          case 24: {
            RoadClosure = input.ReadBool();
            break;
          }
          case 32: {
            TimeToUsualInMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            speed_.AddEntriesFrom(ref input, _repeated_speed_codec);
            break;
          }
          case 24: {
            RoadClosure = input.ReadBool();
            break;
          }
          case 32: {
            TimeToUsualInMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A traffic flow message type dedicated for prediction with higher speed resolution.
  /// The location is split into sections and speed information is assigned per section.
  /// </summary>
  public sealed partial class TrafficFlowWithPredictionPerSection : pb::IMessage<TrafficFlowWithPredictionPerSection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrafficFlowWithPredictionPerSection> _parser = new pb::MessageParser<TrafficFlowWithPredictionPerSection>(() => new TrafficFlowWithPredictionPerSection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficFlowWithPredictionPerSection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowWithPredictionPerSection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowWithPredictionPerSection(TrafficFlowWithPredictionPerSection other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      speedVector_ = other.speedVector_.Clone();
      timeToUsualInMinutes_ = other.timeToUsualInMinutes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficFlowWithPredictionPerSection Clone() {
      return new TrafficFlowWithPredictionPerSection(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location location_;
    /// <summary>
    /// The location information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "speedVector" field.</summary>
    public const int SpeedVectorFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector> _repeated_speedVector_codec
        = pb::FieldCodec.ForMessage(18, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector> speedVector_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector>();
    /// <summary>
    /// The speeds matrix, each speed vector provides speed parameters per section for a certain time
    /// stamp in the future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedVector> SpeedVector {
      get { return speedVector_; }
    }

    /// <summary>Field number for the "timeToUsualInMinutes" field.</summary>
    public const int TimeToUsualInMinutesFieldNumber = 3;
    private readonly static uint TimeToUsualInMinutesDefaultValue = 0;

    private uint timeToUsualInMinutes_;
    /// <summary>
    /// Expected time in minutes it takes until the current speed equals the usual speed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeToUsualInMinutes {
      get { if ((_hasBits0 & 1) != 0) { return timeToUsualInMinutes_; } else { return TimeToUsualInMinutesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timeToUsualInMinutes_ = value;
      }
    }
    /// <summary>Gets whether the "timeToUsualInMinutes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeToUsualInMinutes {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timeToUsualInMinutes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeToUsualInMinutes() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficFlowWithPredictionPerSection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficFlowWithPredictionPerSection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if(!speedVector_.Equals(other.speedVector_)) return false;
      if (TimeToUsualInMinutes != other.TimeToUsualInMinutes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      hash ^= speedVector_.GetHashCode();
      if (HasTimeToUsualInMinutes) hash ^= TimeToUsualInMinutes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      speedVector_.WriteTo(output, _repeated_speedVector_codec);
      if (HasTimeToUsualInMinutes) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeToUsualInMinutes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      speedVector_.WriteTo(ref output, _repeated_speedVector_codec);
      if (HasTimeToUsualInMinutes) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeToUsualInMinutes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      size += speedVector_.CalculateSize(_repeated_speedVector_codec);
      if (HasTimeToUsualInMinutes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeToUsualInMinutes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficFlowWithPredictionPerSection other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
        }
        Location.MergeFrom(other.Location);
      }
      speedVector_.Add(other.speedVector_);
      if (other.HasTimeToUsualInMinutes) {
        TimeToUsualInMinutes = other.TimeToUsualInMinutes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            speedVector_.AddEntriesFrom(input, _repeated_speedVector_codec);
            break;
          }
          case 24: {
            TimeToUsualInMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Location();
            }
            input.ReadMessage(Location);
            break;
          }
          case 18: {
            speedVector_.AddEntriesFrom(ref input, _repeated_speedVector_codec);
            break;
          }
          case 24: {
            TimeToUsualInMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The location message provides all kind of supported location referencing
  /// methods.
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      _hasBits0 = other._hasBits0;
      tmc_ = other.tmc_;
      openlr_ = other.openlr_;
      lengthInMeters_ = other.lengthInMeters_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "tmc" field.</summary>
    public const int TmcFieldNumber = 1;
    private readonly static string TmcDefaultValue = "";

    private string tmc_;
    /// <summary>
    /// The TMC location reference.
    /// It is composed of the following parts: CVVDLLLLL[xE[E]]
    ///        C - hexadecimal country code as described in IEC 62106
    ///       VV - TMC location table number
    ///        D - TMC direction of the chain (direction of travel and NOT the
    ///             direction of queue growth as in RDS-TMC!). Possible values:
    ///             'P': positive direction, internal links only
    ///             '+': positive direction, external links only
    ///             'p': positive direction, internal + external links
    ///             'N': negative direction, internal links only
    ///             '-': negative direction, external links only
    ///             'n': negative direction, internal + external links
    ///    LLLLL - TMC point location code.  If the number is not 5 digits
    ///             long, zeros will be added up to 5 characters at the
    ///             beginning of the code.
    ///  [xE[E]] - Either empty, when extent = 1, or fixed letter 'x' followed
    ///             by the extent (1 or 2 digits).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tmc {
      get { return tmc_ ?? TmcDefaultValue; }
      set {
        tmc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tmc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTmc {
      get { return tmc_ != null; }
    }
    /// <summary>Clears the value of the "tmc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTmc() {
      tmc_ = null;
    }

    /// <summary>Field number for the "openlr" field.</summary>
    public const int OpenlrFieldNumber = 2;
    private readonly static pb::ByteString OpenlrDefaultValue = pb::ByteString.Empty;

    private pb::ByteString openlr_;
    /// <summary>
    /// The binary OpenLR location reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Openlr {
      get { return openlr_ ?? OpenlrDefaultValue; }
      set {
        openlr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "openlr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpenlr {
      get { return openlr_ != null; }
    }
    /// <summary>Clears the value of the "openlr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpenlr() {
      openlr_ = null;
    }

    /// <summary>Field number for the "lengthInMeters" field.</summary>
    public const int LengthInMetersFieldNumber = 3;
    private readonly static uint LengthInMetersDefaultValue = 0;

    private uint lengthInMeters_;
    /// <summary>
    /// Length of location in meters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LengthInMeters {
      get { if ((_hasBits0 & 1) != 0) { return lengthInMeters_; } else { return LengthInMetersDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lengthInMeters_ = value;
      }
    }
    /// <summary>Gets whether the "lengthInMeters" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLengthInMeters {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lengthInMeters" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLengthInMeters() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tmc != other.Tmc) return false;
      if (Openlr != other.Openlr) return false;
      if (LengthInMeters != other.LengthInMeters) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTmc) hash ^= Tmc.GetHashCode();
      if (HasOpenlr) hash ^= Openlr.GetHashCode();
      if (HasLengthInMeters) hash ^= LengthInMeters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTmc) {
        output.WriteRawTag(10);
        output.WriteString(Tmc);
      }
      if (HasOpenlr) {
        output.WriteRawTag(18);
        output.WriteBytes(Openlr);
      }
      if (HasLengthInMeters) {
        output.WriteRawTag(24);
        output.WriteUInt32(LengthInMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTmc) {
        output.WriteRawTag(10);
        output.WriteString(Tmc);
      }
      if (HasOpenlr) {
        output.WriteRawTag(18);
        output.WriteBytes(Openlr);
      }
      if (HasLengthInMeters) {
        output.WriteRawTag(24);
        output.WriteUInt32(LengthInMeters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTmc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tmc);
      }
      if (HasOpenlr) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Openlr);
      }
      if (HasLengthInMeters) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LengthInMeters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.HasTmc) {
        Tmc = other.Tmc;
      }
      if (other.HasOpenlr) {
        Openlr = other.Openlr;
      }
      if (other.HasLengthInMeters) {
        LengthInMeters = other.LengthInMeters;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tmc = input.ReadString();
            break;
          }
          case 18: {
            Openlr = input.ReadBytes();
            break;
          }
          case 24: {
            LengthInMeters = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Tmc = input.ReadString();
            break;
          }
          case 18: {
            Openlr = input.ReadBytes();
            break;
          }
          case 24: {
            LengthInMeters = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The speed message subsumes all speed and travel time related information.
  /// </summary>
  public sealed partial class Speed : pb::IMessage<Speed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Speed> _parser = new pb::MessageParser<Speed>(() => new Speed());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Speed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speed(Speed other) : this() {
      _hasBits0 = other._hasBits0;
      averageSpeedKmph_ = other.averageSpeedKmph_;
      travelTimeSeconds_ = other.travelTimeSeconds_;
      confidence_ = other.confidence_;
      relativeSpeed_ = other.relativeSpeed_;
      trafficCondition_ = other.trafficCondition_;
      averageSpeedMph_ = other.averageSpeedMph_;
      speedCondition_ = other.speedCondition_ != null ? other.speedCondition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Speed Clone() {
      return new Speed(this);
    }

    /// <summary>Field number for the "averageSpeedKmph" field.</summary>
    public const int AverageSpeedKmphFieldNumber = 1;
    private readonly static int AverageSpeedKmphDefaultValue = 0;

    private int averageSpeedKmph_;
    /// <summary>
    /// The average speed along a location in kilometers per hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AverageSpeedKmph {
      get { if ((_hasBits0 & 1) != 0) { return averageSpeedKmph_; } else { return AverageSpeedKmphDefaultValue; } }
      set {
        _hasBits0 |= 1;
        averageSpeedKmph_ = value;
      }
    }
    /// <summary>Gets whether the "averageSpeedKmph" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageSpeedKmph {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "averageSpeedKmph" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageSpeedKmph() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "travelTimeSeconds" field.</summary>
    public const int TravelTimeSecondsFieldNumber = 2;
    private readonly static int TravelTimeSecondsDefaultValue = 0;

    private int travelTimeSeconds_;
    /// <summary>
    /// The time to pass a location in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TravelTimeSeconds {
      get { if ((_hasBits0 & 2) != 0) { return travelTimeSeconds_; } else { return TravelTimeSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        travelTimeSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "travelTimeSeconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTravelTimeSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "travelTimeSeconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTravelTimeSeconds() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 3;
    private readonly static int ConfidenceDefaultValue = 0;

    private int confidence_;
    /// <summary>
    /// The confidences value rates the reliability of this speed estimate.
    /// The quality, amount and age of live data for the affected location
    /// contribute to this score. It scales from 0 (no confidence) to 100
    /// (fully confident about the estimate).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Confidence {
      get { if ((_hasBits0 & 4) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidence {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidence() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "relativeSpeed" field.</summary>
    public const int RelativeSpeedFieldNumber = 4;
    private readonly static float RelativeSpeedDefaultValue = 0F;

    private float relativeSpeed_;
    /// <summary>
    /// The ratio of current speed to the free flow speed on a scale from 0
    /// (stationary traffic) to 1 (free flow traffic). The precision is three
    /// decimal places.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RelativeSpeed {
      get { if ((_hasBits0 & 8) != 0) { return relativeSpeed_; } else { return RelativeSpeedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        relativeSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "relativeSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelativeSpeed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "relativeSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelativeSpeed() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "trafficCondition" field.</summary>
    public const int TrafficConditionFieldNumber = 5;
    private readonly static global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition TrafficConditionDefaultValue = global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition.LongQueuesTraffic;

    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition trafficCondition_;
    /// <summary>
    /// Traffic condition on the affected location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition TrafficCondition {
      get { if ((_hasBits0 & 16) != 0) { return trafficCondition_; } else { return TrafficConditionDefaultValue; } }
      set {
        _hasBits0 |= 16;
        trafficCondition_ = value;
      }
    }
    /// <summary>Gets whether the "trafficCondition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrafficCondition {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "trafficCondition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrafficCondition() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "averageSpeedMph" field.</summary>
    public const int AverageSpeedMphFieldNumber = 6;
    private readonly static int AverageSpeedMphDefaultValue = 0;

    private int averageSpeedMph_;
    /// <summary>
    /// The average speed along a location in international miles per hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AverageSpeedMph {
      get { if ((_hasBits0 & 32) != 0) { return averageSpeedMph_; } else { return AverageSpeedMphDefaultValue; } }
      set {
        _hasBits0 |= 32;
        averageSpeedMph_ = value;
      }
    }
    /// <summary>Gets whether the "averageSpeedMph" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAverageSpeedMph {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "averageSpeedMph" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAverageSpeedMph() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "speedCondition" field.</summary>
    public const int SpeedConditionFieldNumber = 7;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition speedCondition_;
    /// <summary>
    /// Defines conditions when to apply this speed information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition SpeedCondition {
      get { return speedCondition_; }
      set {
        speedCondition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Speed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Speed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AverageSpeedKmph != other.AverageSpeedKmph) return false;
      if (TravelTimeSeconds != other.TravelTimeSeconds) return false;
      if (Confidence != other.Confidence) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RelativeSpeed, other.RelativeSpeed)) return false;
      if (TrafficCondition != other.TrafficCondition) return false;
      if (AverageSpeedMph != other.AverageSpeedMph) return false;
      if (!object.Equals(SpeedCondition, other.SpeedCondition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAverageSpeedKmph) hash ^= AverageSpeedKmph.GetHashCode();
      if (HasTravelTimeSeconds) hash ^= TravelTimeSeconds.GetHashCode();
      if (HasConfidence) hash ^= Confidence.GetHashCode();
      if (HasRelativeSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RelativeSpeed);
      if (HasTrafficCondition) hash ^= TrafficCondition.GetHashCode();
      if (HasAverageSpeedMph) hash ^= AverageSpeedMph.GetHashCode();
      if (speedCondition_ != null) hash ^= SpeedCondition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAverageSpeedKmph) {
        output.WriteRawTag(8);
        output.WriteInt32(AverageSpeedKmph);
      }
      if (HasTravelTimeSeconds) {
        output.WriteRawTag(16);
        output.WriteInt32(TravelTimeSeconds);
      }
      if (HasConfidence) {
        output.WriteRawTag(24);
        output.WriteInt32(Confidence);
      }
      if (HasRelativeSpeed) {
        output.WriteRawTag(37);
        output.WriteFloat(RelativeSpeed);
      }
      if (HasTrafficCondition) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TrafficCondition);
      }
      if (HasAverageSpeedMph) {
        output.WriteRawTag(48);
        output.WriteInt32(AverageSpeedMph);
      }
      if (speedCondition_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SpeedCondition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAverageSpeedKmph) {
        output.WriteRawTag(8);
        output.WriteInt32(AverageSpeedKmph);
      }
      if (HasTravelTimeSeconds) {
        output.WriteRawTag(16);
        output.WriteInt32(TravelTimeSeconds);
      }
      if (HasConfidence) {
        output.WriteRawTag(24);
        output.WriteInt32(Confidence);
      }
      if (HasRelativeSpeed) {
        output.WriteRawTag(37);
        output.WriteFloat(RelativeSpeed);
      }
      if (HasTrafficCondition) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TrafficCondition);
      }
      if (HasAverageSpeedMph) {
        output.WriteRawTag(48);
        output.WriteInt32(AverageSpeedMph);
      }
      if (speedCondition_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SpeedCondition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAverageSpeedKmph) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AverageSpeedKmph);
      }
      if (HasTravelTimeSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TravelTimeSeconds);
      }
      if (HasConfidence) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Confidence);
      }
      if (HasRelativeSpeed) {
        size += 1 + 4;
      }
      if (HasTrafficCondition) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrafficCondition);
      }
      if (HasAverageSpeedMph) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AverageSpeedMph);
      }
      if (speedCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedCondition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Speed other) {
      if (other == null) {
        return;
      }
      if (other.HasAverageSpeedKmph) {
        AverageSpeedKmph = other.AverageSpeedKmph;
      }
      if (other.HasTravelTimeSeconds) {
        TravelTimeSeconds = other.TravelTimeSeconds;
      }
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      if (other.HasRelativeSpeed) {
        RelativeSpeed = other.RelativeSpeed;
      }
      if (other.HasTrafficCondition) {
        TrafficCondition = other.TrafficCondition;
      }
      if (other.HasAverageSpeedMph) {
        AverageSpeedMph = other.AverageSpeedMph;
      }
      if (other.speedCondition_ != null) {
        if (speedCondition_ == null) {
          SpeedCondition = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition();
        }
        SpeedCondition.MergeFrom(other.SpeedCondition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AverageSpeedKmph = input.ReadInt32();
            break;
          }
          case 16: {
            TravelTimeSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            Confidence = input.ReadInt32();
            break;
          }
          case 37: {
            RelativeSpeed = input.ReadFloat();
            break;
          }
          case 40: {
            TrafficCondition = (global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition) input.ReadEnum();
            break;
          }
          case 48: {
            AverageSpeedMph = input.ReadInt32();
            break;
          }
          case 58: {
            if (speedCondition_ == null) {
              SpeedCondition = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition();
            }
            input.ReadMessage(SpeedCondition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AverageSpeedKmph = input.ReadInt32();
            break;
          }
          case 16: {
            TravelTimeSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            Confidence = input.ReadInt32();
            break;
          }
          case 37: {
            RelativeSpeed = input.ReadFloat();
            break;
          }
          case 40: {
            TrafficCondition = (global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.TrafficCondition) input.ReadEnum();
            break;
          }
          case 48: {
            AverageSpeedMph = input.ReadInt32();
            break;
          }
          case 58: {
            if (speedCondition_ == null) {
              SpeedCondition = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SpeedCondition();
            }
            input.ReadMessage(SpeedCondition);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Combines a Speed message with a time stamp in the future this speed is relevant for.
  /// </summary>
  public sealed partial class SpeedWithTimeStamp : pb::IMessage<SpeedWithTimeStamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpeedWithTimeStamp> _parser = new pb::MessageParser<SpeedWithTimeStamp>(() => new SpeedWithTimeStamp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedWithTimeStamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedWithTimeStamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedWithTimeStamp(SpeedWithTimeStamp other) : this() {
      _hasBits0 = other._hasBits0;
      minutesInFuture_ = other.minutesInFuture_;
      speed_ = other.speed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedWithTimeStamp Clone() {
      return new SpeedWithTimeStamp(this);
    }

    /// <summary>Field number for the "minutesInFuture" field.</summary>
    public const int MinutesInFutureFieldNumber = 1;
    private readonly static uint MinutesInFutureDefaultValue = 0;

    private uint minutesInFuture_;
    /// <summary>
    /// The minutes in future relative to the creation time of the complete flow data
    /// the specified speed information is relevant. A value of 0 shall indicate the current
    /// speed data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinutesInFuture {
      get { if ((_hasBits0 & 1) != 0) { return minutesInFuture_; } else { return MinutesInFutureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minutesInFuture_ = value;
      }
    }
    /// <summary>Gets whether the "minutesInFuture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinutesInFuture {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "minutesInFuture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinutesInFuture() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed> _repeated_speed_codec
        = pb::FieldCodec.ForMessage(18, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed> speed_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed>();
    /// <summary>
    /// The speed information at the specified time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed> Speed {
      get { return speed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedWithTimeStamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedWithTimeStamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinutesInFuture != other.MinutesInFuture) return false;
      if(!speed_.Equals(other.speed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinutesInFuture) hash ^= MinutesInFuture.GetHashCode();
      hash ^= speed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinutesInFuture) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinutesInFuture);
      }
      speed_.WriteTo(output, _repeated_speed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinutesInFuture) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinutesInFuture);
      }
      speed_.WriteTo(ref output, _repeated_speed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMinutesInFuture) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinutesInFuture);
      }
      size += speed_.CalculateSize(_repeated_speed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedWithTimeStamp other) {
      if (other == null) {
        return;
      }
      if (other.HasMinutesInFuture) {
        MinutesInFuture = other.MinutesInFuture;
      }
      speed_.Add(other.speed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinutesInFuture = input.ReadUInt32();
            break;
          }
          case 18: {
            speed_.AddEntriesFrom(input, _repeated_speed_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinutesInFuture = input.ReadUInt32();
            break;
          }
          case 18: {
            speed_.AddEntriesFrom(ref input, _repeated_speed_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Combines a SectionSpeeds message with a time stamp in the future these speeds are relevant for.
  /// </summary>
  public sealed partial class SpeedVector : pb::IMessage<SpeedVector>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpeedVector> _parser = new pb::MessageParser<SpeedVector>(() => new SpeedVector());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedVector(SpeedVector other) : this() {
      _hasBits0 = other._hasBits0;
      minutesInFuture_ = other.minutesInFuture_;
      sectionSpeed_ = other.sectionSpeed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedVector Clone() {
      return new SpeedVector(this);
    }

    /// <summary>Field number for the "minutesInFuture" field.</summary>
    public const int MinutesInFutureFieldNumber = 1;
    private readonly static uint MinutesInFutureDefaultValue = 0;

    private uint minutesInFuture_;
    /// <summary>
    /// The minutes in future relative to the creation time of the complete flow data
    /// the specified speed information is relevant. A value of 0 shall indicate the current
    /// speed data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinutesInFuture {
      get { if ((_hasBits0 & 1) != 0) { return minutesInFuture_; } else { return MinutesInFutureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minutesInFuture_ = value;
      }
    }
    /// <summary>Gets whether the "minutesInFuture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinutesInFuture {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "minutesInFuture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinutesInFuture() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sectionSpeed" field.</summary>
    public const int SectionSpeedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed> _repeated_sectionSpeed_codec
        = pb::FieldCodec.ForMessage(18, global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed.Parser);
    private readonly pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed> sectionSpeed_ = new pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed>();
    /// <summary>
    /// List of speed parameters per section. The sections are ordered by start offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.SectionSpeed> SectionSpeed {
      get { return sectionSpeed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinutesInFuture != other.MinutesInFuture) return false;
      if(!sectionSpeed_.Equals(other.sectionSpeed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinutesInFuture) hash ^= MinutesInFuture.GetHashCode();
      hash ^= sectionSpeed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinutesInFuture) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinutesInFuture);
      }
      sectionSpeed_.WriteTo(output, _repeated_sectionSpeed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinutesInFuture) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinutesInFuture);
      }
      sectionSpeed_.WriteTo(ref output, _repeated_sectionSpeed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMinutesInFuture) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinutesInFuture);
      }
      size += sectionSpeed_.CalculateSize(_repeated_sectionSpeed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedVector other) {
      if (other == null) {
        return;
      }
      if (other.HasMinutesInFuture) {
        MinutesInFuture = other.MinutesInFuture;
      }
      sectionSpeed_.Add(other.sectionSpeed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinutesInFuture = input.ReadUInt32();
            break;
          }
          case 18: {
            sectionSpeed_.AddEntriesFrom(input, _repeated_sectionSpeed_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinutesInFuture = input.ReadUInt32();
            break;
          }
          case 18: {
            sectionSpeed_.AddEntriesFrom(ref input, _repeated_sectionSpeed_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Combines a Speed message with an offset value. The speed is only relevant for the location part
  /// starting at the specified offset and ending at the start offset of the succeeding section or the
  /// end of the location in case of the last section.
  /// </summary>
  public sealed partial class SectionSpeed : pb::IMessage<SectionSpeed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SectionSpeed> _parser = new pb::MessageParser<SectionSpeed>(() => new SectionSpeed());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SectionSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SectionSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SectionSpeed(SectionSpeed other) : this() {
      _hasBits0 = other._hasBits0;
      startOffsetInMeters_ = other.startOffsetInMeters_;
      speed_ = other.speed_ != null ? other.speed_.Clone() : null;
      roadClosure_ = other.roadClosure_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SectionSpeed Clone() {
      return new SectionSpeed(this);
    }

    /// <summary>Field number for the "startOffsetInMeters" field.</summary>
    public const int StartOffsetInMetersFieldNumber = 1;
    private readonly static uint StartOffsetInMetersDefaultValue = 0;

    private uint startOffsetInMeters_;
    /// <summary>
    /// Start offset of the section in meters. This offset value is relative to the start of the
    /// location (or in TMC terms: the secondary location).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartOffsetInMeters {
      get { if ((_hasBits0 & 1) != 0) { return startOffsetInMeters_; } else { return StartOffsetInMetersDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startOffsetInMeters_ = value;
      }
    }
    /// <summary>Gets whether the "startOffsetInMeters" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartOffsetInMeters {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "startOffsetInMeters" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartOffsetInMeters() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed speed_;
    /// <summary>
    /// Speed information for section.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "roadClosure" field.</summary>
    public const int RoadClosureFieldNumber = 3;
    private readonly static bool RoadClosureDefaultValue = false;

    private bool roadClosure_;
    /// <summary>
    /// Flag indicating road closures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RoadClosure {
      get { if ((_hasBits0 & 2) != 0) { return roadClosure_; } else { return RoadClosureDefaultValue; } }
      set {
        _hasBits0 |= 2;
        roadClosure_ = value;
      }
    }
    /// <summary>Gets whether the "roadClosure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoadClosure {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "roadClosure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoadClosure() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SectionSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SectionSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartOffsetInMeters != other.StartOffsetInMeters) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (RoadClosure != other.RoadClosure) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartOffsetInMeters) hash ^= StartOffsetInMeters.GetHashCode();
      if (speed_ != null) hash ^= Speed.GetHashCode();
      if (HasRoadClosure) hash ^= RoadClosure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStartOffsetInMeters) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartOffsetInMeters);
      }
      if (speed_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Speed);
      }
      if (HasRoadClosure) {
        output.WriteRawTag(24);
        output.WriteBool(RoadClosure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartOffsetInMeters) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartOffsetInMeters);
      }
      if (speed_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Speed);
      }
      if (HasRoadClosure) {
        output.WriteRawTag(24);
        output.WriteBool(RoadClosure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStartOffsetInMeters) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartOffsetInMeters);
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (HasRoadClosure) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SectionSpeed other) {
      if (other == null) {
        return;
      }
      if (other.HasStartOffsetInMeters) {
        StartOffsetInMeters = other.StartOffsetInMeters;
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          Speed = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed();
        }
        Speed.MergeFrom(other.Speed);
      }
      if (other.HasRoadClosure) {
        RoadClosure = other.RoadClosure;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartOffsetInMeters = input.ReadUInt32();
            break;
          }
          case 18: {
            if (speed_ == null) {
              Speed = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 24: {
            RoadClosure = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartOffsetInMeters = input.ReadUInt32();
            break;
          }
          case 18: {
            if (speed_ == null) {
              Speed = new global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.Speed();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 24: {
            RoadClosure = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Defines conditions on speeds.
  /// </summary>
  public sealed partial class SpeedCondition : pb::IMessage<SpeedCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpeedCondition> _parser = new pb::MessageParser<SpeedCondition>(() => new SpeedCondition());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.ProtobufTrafficFlowV8Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedCondition(SpeedCondition other) : this() {
      _hasBits0 = other._hasBits0;
      laneType_ = other.laneType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedCondition Clone() {
      return new SpeedCondition(this);
    }

    /// <summary>Field number for the "laneType" field.</summary>
    public const int LaneTypeFieldNumber = 1;
    private readonly static global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType LaneTypeDefaultValue = global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType.HighOccupancy;

    private global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType laneType_;
    /// <summary>
    /// Identifies all lanes this speed is relevant for by type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType LaneType {
      get { if ((_hasBits0 & 1) != 0) { return laneType_; } else { return LaneTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneType_ = value;
      }
    }
    /// <summary>Gets whether the "laneType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "laneType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneType != other.LaneType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneType) hash ^= LaneType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLaneType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LaneType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLaneType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LaneType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LaneType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedCondition other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneType) {
        LaneType = other.LaneType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneType = (global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LaneType = (global::Roadnet.Apex.Server.RoadNetwork.Traffic.TomTom.LaneType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
